name: docfx-unitypackage
description: DocFX Unity package is a GitHub action for deploying a DocFX website for Unity packages to GitHub Pages.
author: Casey Hofland
branding:
  icon: 'file-text'
  color: 'white'
inputs:
  github_token:
    description: 'Set a generated GITHUB_TOKEN for pushing to the remote branch.'
    required: false

runs:
  using: "composite"
  steps:
    # This step needs to happen before anything else!
    - name: Move everything inside the manual/ folder.
      shell: bash
      run: |
        if [ -d Documentation~ ] && [ "$(ls -A Documentation~)" ]; then
          mv -v Documentation~/ manual/
          mkdir -p Documentation~
          mv -v manual/ Documentation~/manual/
        else
          mkdir -p Documentation~/manual
        fi

    # Generate pages, tables of contents, the docfx.json and anything the docfx needs.

    - name: Generate index page
      shell: bash
      run: echo 'This page redirects to the [manual](manual/).' > Documentation~/index.md

    - name: Generate main Table of Contents
      shell: bash
      run: |
        echo '- name: Manual
          href: manual/
          homepage: manual/index.md
        - name: Scripting API
          href: api/
          homepage: api/index.md' > Documentation~/toc.yml

    - name: Generate manual Table of Contents
      shell: bash
      # Replace * and 5 consecutive spaces with # in the Table of Contents to convert Unity's format to DocFX's format.
      run: |
        if [ -f Documentation~/manual/TableOfContents.md ]; then
          mv Documentation~/manual/TableOfContents.md Documentation~/manual/toc.md
        fi
        if [ -f Documentation~/manual/toc.md ]; then
          sed -i -e 's/*/#/g' Documentation~/manual/toc.md
          sed -i -e 's/     /#/g' Documentation~/manual/toc.md
        fi

    - name: Generate manual index page
      shell: bash
      run: |
        if [ ! -f Documentation~/manual/index.md ] && [ -f README.md ]; then
          cp README.md Documentation~/manual/index.md
        fi

    - name: Generate api index page
      shell: bash
      run: |
        mkdir -p Documentation~/api
        if [ -f Documentation~/api_index.md ]; then
          cp Documentation~/api_index.md Documentation~/api/index.md
          rm Documentation~/api_index.md
        else
          echo 'This is the documentation for the Scripting APIs of this package.' > Documentation~/api/index.md
        fi

    - name: Generate changelog page
      shell: bash
      run: |
        if [ -f CHANGELOG.md ]; then
          mkdir -p Documentation~/changelog
          cp CHANGELOG.md Documentation~/changelog/CHANGELOG.md
          echo '# [Changes](CHANGELOG.md)' > Documentation~/changelog/toc.md
          echo '- name: Changelog' >> Documentation~/toc.yml
          echo '  href: changelog/' >> Documentation~/toc.yml
          echo '  homepage: changelog/CHANGELOG.md' >> Documentation~/toc.yml
        fi

    - name: Generate license page
      shell: bash
      run: |
        if [ -f LICENSE ] && [ ! -f LICENSE.md ]; then
          mv -v LICENSE LICENSE.md
        fi
        if [ -f LICENSE.md ]; then
          mkdir -p Documentation~/license
          cp LICENSE.md Documentation~/license/LICENSE.md
          echo '# [License](LICENSE.md)' > Documentation~/license/toc.md
          if [ -f 'Third Party Notices.md' ]; then
            cp 'Third Party Notices.md' 'Documentation~/license/Third Party Notices.md'
            sed -i '1i# [Third Party Notices](Third Party Notices.md)' Documentation~/license/toc.md
          fi
          echo '- name: License' >> Documentation~/toc.yml
          echo '  href: license/' >> Documentation~/toc.yml
          echo '  homepage: license/LICENSE.md' >> Documentation~/toc.yml
        fi

    - name: Read package.json
      shell: bash
      run: |
        if [ -f package.json ]; then
          content=`cat package.json`
        else
          content='{}'
        fi
        echo 'package<<EOF' >> $GITHUB_ENV
        echo $content >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV

    - name: Generate docfx.json
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        url=$(gh api "repos/$GITHUB_REPOSITORY/pages" --jq '.html_url')
        echo '{
            "metadata": [{
                "src": [{"src": "..", "files": ["**/*.cs"]}],
                "dest": "api",
                "globalNamespaceId": "Global",
                "allowCompilationErrors": true
            }],
            "build": {
                "globalMetadata": {
                    "_appTitle": "'${{ fromJson(env.package).displayName }}' | '${{ fromJson(env.package).version }}'",
                    "_appFooter": "<span>Made by <a href=\"https://github.com/'$GITHUB_REPOSITORY_OWNER'\" target=\"_blank\">'$GITHUB_REPOSITORY_OWNER'</a> using <a href=\"https://dotnet.github.io/docfx\" target=\"_blank\">DocFX</a></span>",
                    "_enableSearch": true,
                    "_enableNewTab": false,
                    "_disableNewTab": true,
                    "_disableContribution": true,
                    "_disableNextArticle": true
                },
                "fileMetadata": {
                    "_disableContribution": {"manual/**/*.md": false}
                },
                "globalMetadataFiles": [
                ],
                "content": [
                    {"files": ["index.md", "toc.yml"]},
                    {"src": "license", "files": ["*.md"], "dest": "license"},
                    {"src": "changelog", "files": ["*.md"], "dest": "changelog"},
                    {"src": "api", "files": ["*.yml", "index.md"], "dest": "api"},
                    {"src": "manual", "files": ["**/*.md"], "dest": "manual"}
                ],
                "resource": [{"files": ["manual/images/*"]}],
                "template": ["default", "modern"],
                "sitemap": {"baseUrl": "'$url'"},
                "xref": ["'$url'"],
                "xrefService": ["https://xref.docs.microsoft.com/query?uid={uid}"],
                "dest": "../_site"
            }
        }' > Documentation~/docfx.json

    - name: Set Global Metadata Files if exists
      shell: bash
      run: |
        if [ -f Documentation~/manual/config.json ] && [ -f Documentation~/manual/projectMetadata.json ]; then
          sed -i '22i\            "manual/config.json"' Documentation~/docfx.json
          sed -i '22i\            "manual/projectMetadata.json",' Documentation~/docfx.json
        elif [ -f Documentation~/manual/config.json ]; then
          sed -i '22i\            "manual/config.json"' Documentation~/docfx.json
        elif [ -f Documentation~/manual/projectMetadata.json ]; then
          sed -i '22i\            "manual/projectMetadata.json"' Documentation~/docfx.json
        fi

    - name: Disable toc if not exists
      shell: bash
      run: |
        if [ ! -f Documentation~/manual/toc.md ]; then
          sed -i '19i\            "_disableToc": {"manual/**/*.md": false},' Documentation~/docfx.json
          sed -i '19i\            "_layout": {"manual/**/*.md": "landing"},'  Documentation~/docfx.json
        fi
    
    - name: Set favicon if exists
      shell: bash
      run: |
        faviconPattern="Documentation~/manual/images/favicon.*"
        if compgen -G $faviconPattern > /dev/null; then
          favicons=( $faviconPattern )
          faviconPath=${favicons[0]}
          relativeFaviconPath=${faviconPath:15}
          sed -i '12i\            "_appFaviconPath": "'${relativeFaviconPath}'",' Documentation~/docfx.json
        fi

    - name: Set logo if exists
      shell: bash
      run: |
        logoPattern="Documentation~/manual/images/logo.*"
        if compgen -G $logoPattern > /dev/null; then
          logos=( $logoPattern )
          logoPath=${logos[0]}
          relativeLogoPath=${logoPath:15}
          sed -i '12i\            "_appLogoPath": "'${relativeLogoPath}'",' Documentation~/docfx.json
        fi

    - name: Set filter if exists
      shell: bash
      run: |
        if [ -f Documentation~/manual/filter.yml ]; then
          sed -i '5i\        "filter": "manual/filter.yml",' Documentation~/docfx.json
        elif [ -f Documentation~/manual/filter.yaml ]; then
          sed -i '5i\        "filter": "manual/filter.yaml",' Documentation~/docfx.json
        fi

    # Build docfx site through the Documentation~ folder

    - name: Dotnet Setup
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.x
    
    - name: Dotnet Update
      shell: bash
      run: dotnet tool update -g docfx

    - name: Build
      shell: bash
      run: docfx Documentation~/docfx.json

    # Generate a redirect to the manual/ page, taking protocol and custom domain names into account.
    - name: Generate redirect
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        url=$(gh api "repos/$GITHUB_REPOSITORY/pages" --jq '.html_url')
        sed -i '/<\/head>/i\      <meta http-equiv="refresh" content="0;URL='"$url"manual/'">' _site/index.html
